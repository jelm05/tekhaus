server {

    listen 80;
    server_name localhost;
    # server_name tekhaus.herokuapp.com;

    # access_log /var/log/nginx/access.log combined;
    # error_log  /var/log/nginx/error.log warn;

    # Don't show server version or version header
    server_tokens off;

    include mime.types;

    location /static/ {
        # Enables or disables the directory listing output.
        autoindex off;
        alias /static_files/;
    }

    location / {
        # Try everything as a file or a directory, otherwise send it to Gunicorn/Django
        # $uri: Try file and deliver, $uri: Try directory and deliver, otherwise go to app backend
        try_files $uri $uri/ @proxy_to_app;
    }

    location @proxy_to_app {
        # Web is the name of our service defined in docker-compose.yml
        # Proxy pass just moves everything
        proxy_pass http://web:8000;

        # Whatever is in the request headers, pass that too (like authorization token or something)
        proxy_pass_request_headers on;

        # This forwards the IP address to Gunicorn/Django
        # This is important because the Django application doesn't actually know it's receiving a proxy
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Forwards Host Header because the proxy doesn't know the host header
        proxy_set_header Host $http_host;

        # If going via ssl connection, you need to make sure Django knows the type of connection
        proxy_set_header X-Forwarded-Proto $scheme;

        # Assuming Django returns a response/redirect, nginx might think "oh I need to redirect again"
        # but that redirect should be handled by Django, not nginx
        proxy_redirect off;
    }
}